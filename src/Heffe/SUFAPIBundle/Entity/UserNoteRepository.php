<?php

namespace Heffe\SUFAPIBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NoResultException;
use Heffe\SteamOpenIdBundle\Entity\User;
use Heffe\SUFAPIBundle\Services\DateService;

/**
 * UserNoteRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserNoteRepository extends EntityRepository
{
    public function convertDatesToLocal(UserNote $userNote, $offset)
    {
        $userNote->setDateCreated( DateService::convertDateToLocal($userNote->getDateCreated(), $offset) );
        $userNote->setDateUpdated( DateService::convertDateToLocal($userNote->getDateUpdated(), $offset));
    }

    public function getUserNotesForUser($steamId)
    {
        $qB = $this->createQueryBuilder("un");
        $qB
            ->join('un.target', 't')
            ->where('t.steamId = :steamId')
            ->andWhere('un.removed = false')
            ->addOrderBy('un.dateUpdated', 'desc')
            ->addOrderBy('un.dateCreated', 'desc')
            ->setParameter('steamId', $steamId)
            ;

        return $qB->getQuery()->getResult();
    }

    public function getUserNoteByIdAndTargetSteamID($id, $steamId)
    {
        $query = $this->_em->createQuery(
            'SELECT un FROM HeffeSUFAPIBundle:UserNote un
             JOIN un.target t
             WHERE
                un.id = :id
             AND
                t.steamId = :steamId'
        );

        $query->setParameter('id', $id);
        $query->setParameter('steamId', $steamId);

        try
        {
            $userNote = $query->getSingleResult();
        }
        catch(NoResultException $nre)
        {
            $userNote = null;
        }

        return $userNote;
    }

    private function createOrUpdateUserNoteCommon(UserNote $userNote, User $user)
    {
        // Content of the user note cannot be empty
        $content = trim($userNote->getContent());
        if(empty($content))
        {
            return null;
        }

        $userNote->setContent( htmlspecialchars($userNote->getContent()) );

        if($userNote->getId() > 0)
        {
            // User note already exists, so we are going to update it
            $newNote = $this->findOneBy(array('id' => $userNote->getId()));
            if($newNote == null)
            {
                return null;
            }

            if($newNote->getAuthor()->getId() != $user->getId())
            {
                // Actor isn't the original author
                // Updating denied
                return null;
            }

            $newNote->setContent($userNote->getContent());
            $newNote->setDateUpdated( new \DateTime() );
        }
        else
        {
            // This is a new User note

            // Fetching the target
            $queryTarget = $this->_em->createQuery(
                'SELECT su FROM HeffeSUFAPIBundle:SteamUser su
                 WHERE su.steamId = :steamId
                '
            );
            $queryTarget->setParameter('steamId', $userNote->getTarget()->getSteamId());

            try
            {
                $target = $queryTarget->getSingleResult();
            }
            catch(NoResultException $nre)
            {
                $target = null;
            }

            if($target == null)
            {
                $target = new SteamUser();
                $target->setSteamId( $userNote->getTarget()->getSteamId() );
                $target->setDateCreated(new \DateTime());
            }

            $newNote = new UserNote();
            $newNote->setContent( $userNote->getContent() );
            $newNote->setAuthor( $user );
            $newNote->setTarget( $target );
            $newNote->setDateCreated(new \DateTime());
            $newNote->setRemoved(false);

            $this->_em->persist($user);
            $this->_em->persist($target);
        }

        $this->_em->persist($newNote);
        $this->_em->flush();

        return $newNote;
    }

    public function createOrUpdateUserNote(UserNote $userNote, $key)
    {
        // Fetching the user matching the key
        $query = $this->_em->createQuery(
            'SELECT u FROM HeffeSteamOpenIdBundle:User u
             JOIN HeffeSUFAPIBundle:ApiContract ac
             WITH 1=1
             JOIN ac.user u2
             WHERE
                u.id = u2.id
                AND
                ac.apiKey = :key
            '
        );
        $query->setParameter('key', $key);

        try
        {
            $user = $query->getSingleResult();
        }
        catch(NoResultException $nre)
        {
            $user = null;
        }

        if($user == null)
        {
            return null;
        }

        $newNote = $this->createOrUpdateUserNoteCommon($userNote, $user);

        return $newNote;
    }

    public function createOrUpdateUserNoteFromUserId(UserNote $userNote, $userId)
    {
        // Fetching the full user object
        $authorQuery = $this->_em->createQuery(
            'SELECT u FROM HeffeSteamOpenIdBundle:User u
             WHERE u.id = :userId
            '
        );
        $authorQuery->setParameter('userId', $userId);

        try
        {
            $author = $authorQuery->getSingleResult();
        }
        catch(NoResultException $nre)
        {
            // User cannot be null
            return null;
        }

        $newUserNote = $this->createOrUpdateUserNoteCommon($userNote, $author);

        return $newUserNote;
    }

    public function deleteUserNote($userNoteId, $key)
    {
        // Fetching the user matching the key
        $query = $this->_em->createQuery(
            'SELECT u FROM HeffeSteamOpenIdBundle:User u
             JOIN HeffeSUFAPIBundle:ApiContract ac
             WITH 1=1
             JOIN ac.user u2
             WHERE
                u.id = u2.id
                AND
                ac.apiKey = :key
            '
        );
        $query->setParameter('key', $key);

        try
        {
            $user = $query->getSingleResult();
        }
        catch(NoResultException $nre)
        {
            $user = null;
        }

        if($user == null)
        {
            return null;
        }


        if($userNoteId > 0)
        {
            // Fetch user note to remove from the Database
            $dbUserNote = $this->findOneBy(array('id' => $userNoteId));
            if($dbUserNote != null)
            {
                // Only the author of the note is allowed to remove it
                if($dbUserNote->getAuthor()->getId() == $user->getId())
                {
                    $dbUserNote->setRemoved(true);
                    $dbUserNote->setDateRemoved(new \DateTime());

                    $this->_em->persist($dbUserNote);
                    $this->_em->flush();

                    return true;
                }
                else
                {
                    return false;
                }
            }
            else
            {
                return false;
            }
        }
        else
        {
            return false;
        }
    }
}
