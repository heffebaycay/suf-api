<?php

namespace Heffe\SUFAPIBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NoResultException;
use Heffe\SteamOpenIdBundle\Entity\User;

/**
 * ApiContractRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ApiContractRepository extends EntityRepository
{

    public function getCurrentContractForUser(User $user)
    {
        $qB = $this->createQueryBuilder("ac");

        $qB
            ->join('ac.user', 'u')
            ->where('u.id = :userId')
            ->andWhere('ac.revoked = false')
            ->setParameter('userId', $user->getId());

        try
        {
            $apiContract = $qB->getQuery()->getSingleResult();
        }
        catch(NoResultException $nre)
        {
            $apiContract = null;
        }

        return $apiContract;
    }

    public function createNewApiContractForUser(User $user)
    {
        $dbUser = $this->_em->getRepository('HeffeSteamOpenIdBundle:User')->findOneBy(array('id' => $user->getId()));

        do
        {
            $uuid = uniqid();
            $key = strtoupper( md5($uuid) );

            $query = $this->_em->createQuery(
                        'SELECT COUNT(ac.id) FROM HeffeSUFAPIBundle:ApiContract ac
                         WHERE ac.apiKey = :apiKey'
            );

            $query->setParameter('apiKey', $key);

            $idCount = $query->getSingleScalarResult();

        }while($idCount > 0);

        $contract = new ApiContract();
        $contract->setApiKey($key);
        $contract->setUser($dbUser);

        $this->_em->persist($contract);
        $this->_em->persist($dbUser);

        $this->_em->flush();

        return $contract;
    }

    public function revokeCurrentApiContractForUser(User $user)
    {
        $apiContract = $this->getCurrentContractForUser($user);
        if($apiContract != null)
        {
            $apiContract->setDateRevoked(new \DateTime());
            $apiContract->setRevoked(true);
            $this->_em->persist($apiContract);
            $this->_em->flush();
        }
    }

    public function getContractForApiKey($key)
    {
        $qB = $this->createQueryBuilder('ac');

        $qB
            ->where('ac.apiKey = :key')
            ->setParameter('key', $key);

        try
        {
            $contract = $qB->getQuery()->getSingleResult();
        }
        catch(NoResultException $nre)
        {
            $contract = null;
        }

        return $contract;
    }
}
